# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2017-01-19 21:18
from __future__ import unicode_literals

from django.db import migrations

from seed.models.columns import Column, ColumnMapping


def duplicate_column(column):
    new_c = Column.objects.get(pk=column.id)
    new_c.pk = None
    new_c.save()

    return new_c


def duplicate_mapping(mapping, column, raw_or_mapped):
    new_m = ColumnMapping.objects.get(pk=mapping.id)
    new_m.pk = None
    new_m.save()

    new_c = duplicate_column(column)

    # duplicate any of the columns
    if raw_or_mapped == 'mapped':
        new_m.column_mapped.clear()
        new_m.column_mapped.add(new_c)
        new_m.save()
    elif raw_or_mapped == 'raw':
        new_m.column_raw.clear()
        new_m.column_raw.add(new_c)
        new_m.save()

    return new_m, new_c


def split_duplicate_mapping(cm):
    if cm.column_raw.count() == 0 or cm.column_mapped.count() == 0:
        raise Exception("column_raw or column_mapped is none")

    if cm.column_raw.count() > 1 or cm.column_mapped.count() > 1:
        raise Exception("More than one column_raw or column_mapped in mapping")

    print "    Splitting duplicate mapping"
    raw = cm.column_raw.first()
    new_raw = duplicate_column(raw)
    cm.column_raw.clear()
    cm.column_raw.add(new_raw)
    cm.save()

    return True


def forwards(apps, schema_editor):
    # find which columns are not used in column mappings
    not_used_count = 0

    for c in Column.objects.all():
        cm_raw = ColumnMapping.objects.filter(column_raw=c)
        cm_mapped = ColumnMapping.objects.filter(column_mapped=c)

        # check if the column isn't used
        if cm_raw.count() == 0 and cm_mapped.count() == 0:
            print "Column {}: {}.{}".format(c.id, c.table_name, c.column_name)
            print "    deleting column: not used in any mappings"
            not_used_count += 1
            c.delete()
            continue

    print ""
    print ""
    print "-------------------------------------------------------------------"
    print "Total unused columns: {}".format(not_used_count)
    print "Total Columns: {}".format(Column.objects.all().count())


class Migration(migrations.Migration):
    dependencies = [
        ('seed', '0053_remove_same_column_in_mappings'),
    ]

    operations = [
        migrations.RunPython(forwards),
    ]
